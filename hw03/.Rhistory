train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.model = "
data{
int<lower=0> nrow;
int<lower=0> ncol;
matrix[nrow, ncol] train_x; //use matirx rather than vector
vector[nrow] train_y;
int<lower=0> nrow_test;
matrix[nrow_test, ncol] test;
}
parameters{
real alpha;
vector[ncol] beta;
real<lower=0> sigma;
}
model{
alpha ~ normal(0,8);
beta ~ normal(0,5);
sigma ~ lognormal(0,2);
train_y ~ normal(train_x * beta + alpha, sigma);
//train_x lies afore beta, because it's a matrix multiplication
}
generated quantities{
real y_pred[nrow_test];
vector[nrow_test] mu;
mu = alpha + test * beta;
y_pred = normal_rng(mu, sigma); //get pred
}
"
lr.model = "
data{
int<lower=0> nrow;
int<lower=0> ncol;
matrix[nrow, ncol] train_x; //use matirx rather than vector
vector[nrow] train_y;
int<lower=0> nrow_test;
matrix[nrow_test, ncol] test;
}
parameters{
real alpha;
vector[ncol] beta;
real<lower=0> sigma;
}
model{
alpha ~ normal(0,10);
beta ~ normal(0,5);
sigma ~ lognormal(0,2);
train_y ~ normal(train_x * beta + alpha, sigma);
//train_x lies afore beta, because it's a matrix multiplication
}
generated quantities{
real y_pred[nrow_test];
vector[nrow_test] mu;
mu = alpha + test * beta;
y_pred = normal_rng(mu, sigma); //get pred
}
"
lr.data = list(
train_x = processed_x_train,
train_y = train_y,
nrow = nrow(processed_x_train),
ncol = ncol(processed_x_train),
test = processed_x_tuning,
nrow_test = nrow(processed_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[2:43]
tuning_sigma = lr.para[44]
tuning_pred = lr.para[45:1035] ## 991 preds
rmse(actual=tuning_y, predicted=tuning_pred)
all_data_to_pca = rbind(processed_x_tuning, processed_x_train, processed_x_test)
# perform pca
res_pca = prcomp(all_data_to_pca)
pca_features = predict(res_pca, newdata = all_data_to_pca)
# proportion of explained variance
importance_pca <- summary(res_pca)$importance
barplot(sort(importance_pca[2, importance_pca[2, ] > 0.005], decreasing = FALSE), horiz = TRUE, xlim=c(0,0.14),
las=1, cex.names=0.6, main="Explained Variance by Principal Component", xlab="Proportion of explained variance")
all_data_to_pca = rbind(processed_x_tuning, processed_x_train, processed_x_test)
# perform pca
res_pca = prcomp(all_data_to_pca)
pca_features = predict(res_pca, newdata = all_data_to_pca)
# proportion of explained variance
importance_pca <- summary(res_pca)$importance
barplot(sort(importance_pca[2, importance_pca[2, ] > 0.002], decreasing = FALSE), horiz = TRUE, xlim=c(0,0.14),
las=1, cex.names=0.6, main="Explained Variance by Principal Component", xlab="Proportion of explained variance")
colnames(pca_features)
selectcol_num = 30
pca_x_tuning = pca_features[1:991, 1:selectcol_num]
pca_x_train = pca_features[992:nrow(train_process), 1:selectcol_num]
pca_x_test = pca_features[(nrow(train_process)+1):nrow(pca_features), 1:selectcol_num]
dim(pca_x_tuning)
dim(pca_x_train)
dim(pca_x_test)
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
selectcol_num = 35
pca_x_tuning = pca_features[1:991, 1:selectcol_num]
pca_x_train = pca_features[992:nrow(train_process), 1:selectcol_num]
pca_x_test = pca_features[(nrow(train_process)+1):nrow(pca_features), 1:selectcol_num]
dim(pca_x_tuning)
dim(pca_x_train)
dim(pca_x_test)
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
selectcol_num = 36
pca_x_tuning = pca_features[1:991, 1:selectcol_num]
pca_x_train = pca_features[992:nrow(train_process), 1:selectcol_num]
pca_x_test = pca_features[(nrow(train_process)+1):nrow(pca_features), 1:selectcol_num]
dim(pca_x_tuning)
dim(pca_x_train)
dim(pca_x_test)
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
selectcol_num = 35
pca_x_tuning = pca_features[1:991, 1:selectcol_num]
pca_x_train = pca_features[992:nrow(train_process), 1:selectcol_num]
pca_x_test = pca_features[(nrow(train_process)+1):nrow(pca_features), 1:selectcol_num]
dim(pca_x_tuning)
dim(pca_x_train)
dim(pca_x_test)
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_test,
nrow_test = nrow(pca_x_test))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing(
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
ans_pred = lr.para[(2+selectcol_num+1) : ((2+selectcol_num+1) + 4088 - 1)] ## 4088 preds
ans_pred[1:9]
length(ans_pred)
ans_pred = data.frame(ans_pred)
colnames(ans_pred) = c("Stage1.Output.Measurement0.U.Actual")
rownames(ans_pred) = c()
test_id = data.frame(test_id)
colnames(test_id) = c("ID")
rownames(test_id) = c()
sub_data = cbind(test_id, ans_pred)
sub_data
write.csv(sub_data,"test_sub.csv", row.names = FALSE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
lr.data = list(
train_x = pca_x_train,
train_y = train_y,
nrow = nrow(pca_x_train),
ncol = ncol(pca_x_train),
test = pca_x_tuning,
nrow_test = nrow(pca_x_tuning))
stan_m = stan_model(model_code = lr.model)
lr.fit = optimizing( # optimizing function to accelerate the model
stan_m,
data = lr.data,
hessian = TRUE)
lr.para = lr.fit$par
tuning_alpha = lr.para[1]
tuning_beta_list = lr.para[ 2 : (2+selectcol_num-1) ]
tuning_sigma = lr.para[ 2+selectcol_num ]
tuning_pred = lr.para[ (2+selectcol_num+1) : ((2+selectcol_num+1) + 991 - 1) ] ## 991 preds
tuning_pred[1:9]
print(rmse(actual=tuning_y, predicted=tuning_pred))
