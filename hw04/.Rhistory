chains = 1)
q1_c_m3 ="
data{
int N;
vector[N] y;
vector[N] A;
vector[N] R;
vector[N] AR;
}
parameters{
real alpha;
real beta_a;
real beta_r;
real beta_ar;
real sigma;
}
model{
vector[N] mu = alpha + beta_a*A + beta_r*R + beta_ar*AR;
y ~ normal(mu, sigma);
alpha ~ normal(1, 0.1);
beta_a ~ normal(0, 0.3);
beta_r ~ normal(0, 0.3);
beta_ar ~ normal(0, 0.3);
sigma ~ exponential(1);
}
generated quantities{
vector[N] pred_mu;
vector[N] log_lik;
pred_mu = alpha + beta_a*A + beta_r*R + beta_ar*AR;
for(i in 1:N){
log_lik[i] = normal_lpdf(y[i] | pred_mu[i], sigma);
}
}
"
q1_c_data3 = list(N = nrow(data_without_sey),
y = log(data_without_sey$rgdppc_2000),
A = data_without_sey$cont_africa,
R = data_without_sey$rugged,
AR = data_without_sey$AR)
q1_c_fit3 = stan(model_code = q1_c_m3,
data = q1_c_data3,
iter = 4000,
chains = 1)
compare(q1_c_fit1, q1_c_fit2, q1_c_fit3)
set.seed(1)
x = q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A; R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x, mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x, mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:4, 2, 2))
plot(1:n.rep,
theta[1,] + theta[2,]*A + theta[3,]*R + theta[4,]*AR,
type="l",
xlab="iteration",
ylab=expression(mu))
hist(theta[1,-(1:1000)] + theta[2,-(1:1000)]*A + theta[3,-(1:1000)]*R + theta[4,-(1:1000)]*AR,
main="",
xlab=expression(mu))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
compare(q1_c_fit1, q1_c_fit2, q1_c_fit3)
set.seed(1)
x = q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A; R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x, mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x, mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:4, 2, 2))
plot(1:n.rep,
theta[1,] + theta[2,]*A + theta[3,]*R + theta[4,]*AR,
type="l",
xlab="iteration",
ylab=expression(mu))
hist(
theta[1,-(1:1000)] + theta[2,-(1:1000)]*A[-(1:1000)] + theta[3,-(1:1000)]*R[-(1:1000)] + theta[4,-(1:1000)]*A[-(1:1000)],
main="",
xlab=expression(mu))
layout(matrix(1:4, 2, 2))
plot(1:n.rep,
theta[1,] + theta[2,]*A + theta[3,]*R + theta[4,]*AR,
type="l",
xlab="iteration",
ylab=expression(mu))
hist(
theta[1,-(1:1000)] + theta[2,-(1:1000)]*A[-(1:1000),] +
theta[3,-(1:1000)]*R[-(1:1000),] + theta[4,-(1:1000)]*A[-(1:1000),],
main="",
xlab=expression(mu))
A
A
theta[2,]
A
theta[2,1]
layout(matrix(1:4, 2, 2))
plot(1:n.rep,
scale(theta[1,] + theta[2,]*A + theta[3,]*R + theta[4,]*AR),
type="l",
xlab="iteration",
ylab=expression(mu))
hist(
theta[1,-(1:1000)] + theta[2,-(1:1000)]*A[-(1:1000),] +
theta[3,-(1:1000)]*R[-(1:1000),] + theta[4,-(1:1000)]*A[-(1:1000),],
main="",
xlab=expression(mu))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
?dnorm
set.seed(1)
x = q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A
R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
set.seed(1)
x = q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A
R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
theta[5,],
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
theta[5,],
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(theta[5,-(1:1000)],main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
set.seed(1)
x = rnorm(20)*2+1#q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A
R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
theta[2,1]*A
theta[2,1]
theta[1,]
theta[2,1]
theta[3,1]
theta[4,1]
set.seed(1)
x = q1_c_data3$y  ## simulated data
n.rep = 10000
n.accept = 0
A = q1_c_data3$A
R = q1_c_data3$R
AR = q1_c_data3$AR
theta <- matrix(0, 5, n.rep) ## storage for sim. values
ll0 <- sum(dnorm(
x,
mean = theta[1,1] + theta[2,1]*A + theta[3,1]*R + theta[4,1]*AR,
sd=exp(theta[5,1]),
log=TRUE))
for (i in 2:n.rep) { ## The MH loop
theta[,i] <- theta[,i-1] + rt(5,df=100)*0.05 ## proposal
ll1 <- sum(dnorm(
x,
mean = theta[1,i] + theta[2,i]*A + theta[3,i]*R + theta[4,i]*AR,
sd=exp(theta[5,i]),
log=TRUE))
if (exp(ll1-ll0)>runif(1)) { ## MH accept/reject
ll0 = ll1
n.accept = n.accept+1 ## accept
}
else theta[,i] = theta[,i-1] ## reject
}
layout(matrix(1:8, 2, 4))
plot(1:n.rep,
theta[1,],
type="l",
xlab="iteration",
ylab="alpha")
hist(theta[1,-(1:1000)],main="", xlab="alpha")
plot(1:n.rep,
theta[2,],
type="l",
xlab="iteration",
ylab="beta_A")
hist(theta[2,-(1:1000)],main="", xlab="beta_A")
plot(1:n.rep,
theta[3,],
type="l",
xlab="iteration",
ylab="beta_R")
hist(theta[3,-(1:1000)],main="", xlab="beta_R")
plot(1:n.rep,
theta[4,],
type="l",
xlab="iteration",
ylab="beta_AR")
hist(theta[4,-(1:1000)],main="", xlab="beta_AR")
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,-(1:1000)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep-1000,
exp(theta[5,-(1:1000)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:(n.rep-1000),
exp(theta[5,-(1:1000)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1:n.rep,
exp(theta[5,]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1000:n.rep,
exp(theta[5,-(1:1000)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1001:n.rep,
exp(theta[5,-(1:1000)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
layout(matrix(1:2, 1, 2))
plot(1000:n.rep,
exp(theta[5,-(1:999)]),
type="l",
xlab="iteration",
ylab=expression(sigma))
hist(exp(theta[5,-(1:1000)]),main="", xlab=expression(sigma))
