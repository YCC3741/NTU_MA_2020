aes(x = rural, y = afternoon),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
suppressMessages(library(plyr))
suppressMessages(library(rethinking))
suppressMessages(library(rstan))
suppressMessages(library(tidyverse))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
suppressMessages(library(skimr)) # for n_unique func
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
p1.2.1 = p1.2.1 +
geom_point(data = partialpooled,
aes(rural, difference),
color = "dodgerblue") +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
p1.2.2 = p1.2.2 +
geom_point(data = partialpooled,
aes(rural, urban),
color = "dodgerblue") +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
p1.2.1 = ggplot()+
geom_point(data = unpooled, aes(x = urban, y = difference))
p1.2.2 = ggplot()+
geom_point(data = unpooled, aes(x = urban, y = rural))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B[,1][1:60],
difference = q3_result_B[,1][61:120]) %>%
mutate(urban = rural + difference)
partialpooled
p1.2.1 = p1.2.1 +
geom_point(data = partialpooled,
aes(rural, difference),
color = "dodgerblue") +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
p1.2.2 = p1.2.2 +
geom_point(data = partialpooled,
aes(rural, urban),
color = "dodgerblue") +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
p1.2.1 = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = difference))
p1.2.2 = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = urban))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B$interceptmean[1:60],
difference = q3_result_B$interceptmean[61:120]) %>%
mutate(urban = rural + difference)
partialpooled
p1.2.1 = p1.2.1 +
geom_point(data = partialpooled,
aes(rural, difference),
color = "dodgerblue") +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
p1.2.2 = p1.2.2 +
geom_point(data = partialpooled,
aes(rural, urban),
color = "dodgerblue") +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
p1.2.1 = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = difference, color = "Train data"))
p1.2.2 = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = urban, color = "Train data"))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B$interceptmean[1:60],
difference = q3_result_B$interceptmean[61:120]) %>%
mutate(urban = rural + difference)
partialpooled
p1.2.1 = p1.2.1 +
geom_point(data = partialpooled,
aes(rural, difference, color = "Prediction")) +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
p1.2.2 = p1.2.2 +
geom_point(data = partialpooled,
aes(rural, urban, color = "Prediction")) +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
grid.arrange(p1.2.1, p1.2.2, nrow = 1)
grid.arrange(p1.2.1, p1.2.2, nrow = 2)
p1.2.1
p1.2.2
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
q3_pic_alpha_beta = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = difference, color = "Train data"))
q3_pic_rural_urban = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = urban, color = "Train data"))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B$interceptmean[1:60],
difference = q3_result_B$interceptmean[61:120]) %>%
mutate(urban = rural + difference)
partialpooled
q3_pic_alpha_beta = q3_pic_alpha_beta +
geom_point(data = partialpooled,
aes(rural, difference, color = "Prediction")) +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
q3_pic_rural_urban = q3_pic_rural_urban +
geom_point(data = partialpooled,
aes(rural, urban, color = "Prediction")) +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
p1.2.1 = p1.2.1 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
p1.2.2 = p1.2.2 +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
q3_pic_alpha_beta
q3_pic_rural_urban
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
q3_pic_alpha_beta = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = difference, color = "Train data"))
q3_pic_rural_urban = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = urban, color = "Train data"))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B$interceptmean[1:60],
difference = q3_result_B$interceptmean[61:120]) %>%
mutate(urban = rural + difference)
partialpooled
q3_pic_alpha_beta = q3_pic_alpha_beta +
geom_point(data = partialpooled,
aes(rural, difference, color = "Prediction")) +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
q3_pic_rural_urban = q3_pic_rural_urban +
geom_point(data = partialpooled,
aes(rural, urban, color = "Prediction")) +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
q3_pic_alpha_beta = q3_pic_alpha_beta +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
q3_pic_rural_urban = q3_pic_rural_urban +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
q3_pic_alpha_beta
q3_pic_rural_urban
suppressMessages(library(plyr))
suppressMessages(library(rethinking))
suppressMessages(library(rstan))
suppressMessages(library(tidyverse))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
suppressMessages(library(skimr)) # for n_unique func
data(bangladesh)
bangladesh
train = bangladesh %>%
dplyr::select("district", "urban", "use.contraception")
train$district = as.integer(as.factor(train$district))
train
q3_model_A = "
data{
int N;
int N_district;
int district[N];
int urban[N];
int contracept[N]; // y
}
parameters {
// parameters
vector[2] alpha[N_district]; // N_district x 2 matrix
// hyperparameters
vector<lower=0>[2] sigma_alpha;
corr_matrix[2] rho_alpha;
}
transformed parameters {
vector[N] p;
matrix[2,2] SIGMA_alpha; //sigma matrix in MVN
for (i in 1:N){
p[i] = inv_logit( alpha[district[i], 1] + alpha[district[i], 2] * urban[i] );
}
SIGMA_alpha = quad_form_diag(rho_alpha, sigma_alpha);
}
model{
//likelihood
contracept ~ binomial(1, p);
//prior
alpha ~ multi_normal(rep_vector(0, 2), SIGMA_alpha);
//hyper prior
sigma_alpha ~ exponential(1);
rho_alpha ~ lkj_corr(2);
}
generated quantities {
vector[N] log_lik;
vector[N] pred_y;
for (i in 1:N){
log_lik[i] = binomial_lpmf(contracept[i] | 1, p[i]);
}
for (i in 1:N){
pred_y[i] = binomial_rng(1, p[i]);
}
}
"
q3_data_A = list(
N = nrow(train),
N_district = length(unique(train$district)),
district = train$district,
urban = train$urban,
contracept = train$use.contraception
)
q3_fit_A = stan(
model_code = q3_model_A,
data = q3_data_A,
cores = 4, chains = 2,
warmup = 4000, iter = 16000,
control = list(adapt_delta=.99)
)
options(max.print=1000000)
print(q3_fit_A, pars = c("alpha"))
q3_model_B = "
data{
int N;
int N_district;
int district[N];
int urban[N];
int contracept[N]; // y
}
parameters {
//hyperparameters
cholesky_factor_corr[2] L_Rho_alpha;
vector<lower=0>[2] sigma_alpha;
//parameters
matrix[2, N_district] z_alpha;
}
transformed parameters{
vector[N] p;
matrix[N_district, 2] alpha;
// calculate alpha
alpha = (diag_pre_multiply(sigma_alpha, L_Rho_alpha) * z_alpha)';
// we transpose the result to make it a N_district x 2 matrix
// calculate p **you have to put this part after the parts calculating alpha/beta**
for (i in 1:N){
p[i] = inv_logit(alpha[district[i], 1] + alpha[district[i], 2] * urban[i]);
}
}
model{
//likelihood
contracept ~ binomial(1, p);
//hyperprior
L_Rho_alpha ~ lkj_corr_cholesky(2);
sigma_alpha ~ exponential(1);
//prior
to_vector(z_alpha) ~ normal(0, 1);
}
generated quantities{
vector[N] log_lik;
vector[N] pred_y;
for (i in 1:N){
log_lik[i] = binomial_lpmf(contracept[i] | 1, p[i]);
}
for (i in 1:N){
pred_y[i] = binomial_rng(1, p[i]);
}
}
"
q3_data_B = list(
N = nrow(train),
N_district = length(unique(train$district)),
district = train$district,
urban = train$urban,
contracept = train$use.contraception
)
q3_fit_B = stan(
model_code = q3_model_B,
data = q3_data_B,
cores = 4, chains = 2,
warmup = 4000, iter = 16000,
control = list(adapt_delta=.99, max_treedepth = 25)
)
options(max.print=1000000)
print(q3_fit_B, pars = c("alpha"))
unpooled = train %>%
group_by(district, urban) %>%
summarise(use.contraception = mean(use.contraception)) %>%
ungroup() %>%
mutate(urban = ifelse(urban  == 1, "urban", "rural")) %>%
spread(urban, use.contraception) %>%
mutate(difference = urban - rural)
unpooled
q3_pic_alpha_beta = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = difference, color = "Train data"))
q3_pic_rural_urban = ggplot()+
geom_point(data = unpooled, aes(x = rural, y = urban, color = "Train data"))
q3_post_B = as.data.frame(q3_fit_B, pars = "alpha")
q3_result_B = data.frame(
interceptmean = q3_post_B %>% apply(., 2, mean)
)
partialpooled = data.frame(
district = 1:60,
rural = q3_result_B$interceptmean[1:60],
difference = q3_result_B$interceptmean[61:120]) %>%
mutate(urban = rural + difference)
partialpooled
q3_pic_alpha_beta = q3_pic_alpha_beta +
geom_point(data = partialpooled,
aes(rural, difference, color = "Prediction")) +
geom_segment(data = partialpooled,
aes(x = rural,
y = difference,
xend = unpooled$rural,
yend = unpooled$difference)) +
labs(x = "alpha", y = "beta")
q3_pic_rural_urban = q3_pic_rural_urban +
geom_point(data = partialpooled,
aes(rural, urban, color = "Prediction")) +
geom_segment(data = NULL,
aes(x = partialpooled$rural,
y = partialpooled$urban,
xend = unpooled$rural,
yend = unpooled$urban)) +
labs(x = "rural", y = "urban")
for (i in c(c(0.1,0.3,0.5,0.8,0.99))) {
q3_pic_alpha_beta = q3_pic_alpha_beta +
stat_ellipse(data = partialpooled,
aes(x = rural, y = difference),
type = "norm", level = i, alpha=.2)
q3_pic_rural_urban = q3_pic_rural_urban +
stat_ellipse(data = partialpooled,
aes(x = rural, y = urban),
type = "norm", level = i, alpha=.2)
}
q3_pic_alpha_beta
q3_pic_rural_urban
